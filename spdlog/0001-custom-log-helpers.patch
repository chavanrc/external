From f0276196793e3b1bd76284381114743d58d930f4 Mon Sep 17 00:00:00 2001
From: "rajendra.chavan" <rajendra.chavan@rksv.in>
Date: Sat, 17 Oct 2020 00:10:56 +0530
Subject: [PATCH] custom log helpers

---
 include/spdlog/spdlog.h | 36 ++++++++++++++++++++++++++++++++++++
 1 file changed, 36 insertions(+)

diff --git a/include/spdlog/spdlog.h b/include/spdlog/spdlog.h
index bac5d26f..6a358ffb 100644
--- a/include/spdlog/spdlog.h
+++ b/include/spdlog/spdlog.h
@@ -243,49 +243,85 @@ inline void critical(const T &msg)
 #if SPDLOG_ACTIVE_LEVEL <= SPDLOG_LEVEL_TRACE
 #define SPDLOG_LOGGER_TRACE(logger, ...) SPDLOG_LOGGER_CALL(logger, spdlog::level::trace, __VA_ARGS__)
 #define SPDLOG_TRACE(...) SPDLOG_LOGGER_TRACE(spdlog::default_logger_raw(), __VA_ARGS__)
+#define SERVER_TRACE(...) SPDLOG_LOGGER_CALL(server_logger, spdlog::level::trace, __VA_ARGS__)
+#define MATCHING_TRACE(...) SPDLOG_LOGGER_CALL(matching_logger, spdlog::level::trace, __VA_ARGS__)
+#define PUBLISHER_TRACE(...) SPDLOG_LOGGER_CALL(publisher_logger, spdlog::level::trace, __VA_ARGS__)
 #else
 #define SPDLOG_LOGGER_TRACE(logger, ...) (void)0
 #define SPDLOG_TRACE(...) (void)0
+#define SERVER_TRACE(...) (void)0
+#define MATCHING_TRACE(...) (void)0
+#define PUBLISHER_TRACE(...) (void)0
 #endif
 
 #if SPDLOG_ACTIVE_LEVEL <= SPDLOG_LEVEL_DEBUG
 #define SPDLOG_LOGGER_DEBUG(logger, ...) SPDLOG_LOGGER_CALL(logger, spdlog::level::debug, __VA_ARGS__)
 #define SPDLOG_DEBUG(...) SPDLOG_LOGGER_DEBUG(spdlog::default_logger_raw(), __VA_ARGS__)
+#define SERVER_DEBUG(...) SPDLOG_LOGGER_CALL(server_logger, spdlog::level::debug, __VA_ARGS__)
+#define MATCHING_DEBUG(...) SPDLOG_LOGGER_CALL(matching_logger, spdlog::level::debug, __VA_ARGS__)
+#define PUBLISHER_DEBUG(...) SPDLOG_LOGGER_CALL(publisher_logger, spdlog::level::debug, __VA_ARGS__)
 #else
 #define SPDLOG_LOGGER_DEBUG(logger, ...) (void)0
 #define SPDLOG_DEBUG(...) (void)0
+#define SERVER_DEBUG(...) (void)0
+#define MATCHING_DEBUG(...) (void)0
+#define PUBLISHER_DEBUG(...) (void)0
 #endif
 
 #if SPDLOG_ACTIVE_LEVEL <= SPDLOG_LEVEL_INFO
 #define SPDLOG_LOGGER_INFO(logger, ...) SPDLOG_LOGGER_CALL(logger, spdlog::level::info, __VA_ARGS__)
 #define SPDLOG_INFO(...) SPDLOG_LOGGER_INFO(spdlog::default_logger_raw(), __VA_ARGS__)
+#define SERVER_INFO(...) SPDLOG_LOGGER_CALL(server_logger, spdlog::level::info, __VA_ARGS__)
+#define MATCHING_INFO(...) SPDLOG_LOGGER_CALL(matching_logger, spdlog::level::info, __VA_ARGS__)
+#define PUBLISHER_INFO(...) SPDLOG_LOGGER_CALL(publisher_logger, spdlog::level::info, __VA_ARGS__)
 #else
 #define SPDLOG_LOGGER_INFO(logger, ...) (void)0
 #define SPDLOG_INFO(...) (void)0
+#define SERVER_INFO(...) (void)0
+#define MATCHING_INFO(...) (void)0
+#define PUBLISHER_INFO(...) (void)0
 #endif
 
 #if SPDLOG_ACTIVE_LEVEL <= SPDLOG_LEVEL_WARN
 #define SPDLOG_LOGGER_WARN(logger, ...) SPDLOG_LOGGER_CALL(logger, spdlog::level::warn, __VA_ARGS__)
 #define SPDLOG_WARN(...) SPDLOG_LOGGER_WARN(spdlog::default_logger_raw(), __VA_ARGS__)
+#define SERVER_WARN(...) SPDLOG_LOGGER_CALL(server_logger, spdlog::level::warn, __VA_ARGS__)
+#define MATCHING_WARN(...) SPDLOG_LOGGER_CALL(matching_logger, spdlog::level::warn, __VA_ARGS__)
+#define PUBLISHER_WARN(...) SPDLOG_LOGGER_CALL(publisher_logger, spdlog::level::warn, __VA_ARGS__)
 #else
 #define SPDLOG_LOGGER_WARN(logger, ...) (void)0
 #define SPDLOG_WARN(...) (void)0
+#define SERVER_WARN(...) (void)0
+#define MATCHING_WARN(...) (void)0
+#define PUBLISHER_WARN(...) (void)0
 #endif
 
 #if SPDLOG_ACTIVE_LEVEL <= SPDLOG_LEVEL_ERROR
 #define SPDLOG_LOGGER_ERROR(logger, ...) SPDLOG_LOGGER_CALL(logger, spdlog::level::err, __VA_ARGS__)
 #define SPDLOG_ERROR(...) SPDLOG_LOGGER_ERROR(spdlog::default_logger_raw(), __VA_ARGS__)
+#define SERVER_ERROR(...) SPDLOG_LOGGER_CALL(server_logger, spdlog::level::err, __VA_ARGS__)
+#define MATCHING_ERROR(...) SPDLOG_LOGGER_CALL(matching_logger, spdlog::level::err, __VA_ARGS__)
+#define PUBLISHER_ERROR(...) SPDLOG_LOGGER_CALL(publisher_logger, spdlog::level::err, __VA_ARGS__)
 #else
 #define SPDLOG_LOGGER_ERROR(logger, ...) (void)0
 #define SPDLOG_ERROR(...) (void)0
+#define SERVER_ERROR(...) (void)0
+#define MATCHING_ERROR(...) (void)0
+#define PUBLISHER_ERROR(...) (void)0
 #endif
 
 #if SPDLOG_ACTIVE_LEVEL <= SPDLOG_LEVEL_CRITICAL
 #define SPDLOG_LOGGER_CRITICAL(logger, ...) SPDLOG_LOGGER_CALL(logger, spdlog::level::critical, __VA_ARGS__)
 #define SPDLOG_CRITICAL(...) SPDLOG_LOGGER_CRITICAL(spdlog::default_logger_raw(), __VA_ARGS__)
+#define SERVER_CRITICAL(...) SPDLOG_LOGGER_CALL(server_logger, spdlog::level::critical, __VA_ARGS__)
+#define MATCHING_CRITICAL(...) SPDLOG_LOGGER_CALL(matching_logger, spdlog::level::critical, __VA_ARGS__)
+#define PUBLISHER_CRITICAL(...) SPDLOG_LOGGER_CALL(publisher_logger, spdlog::level::critical, __VA_ARGS__)
 #else
 #define SPDLOG_LOGGER_CRITICAL(logger, ...) (void)0
 #define SPDLOG_CRITICAL(...) (void)0
+#define SERVER_CRITICAL(...) (void)0
+#define MATCHING_CRITICAL(...) (void)0
+#define PUBLISHER_CRITICAL(...) (void)0
 #endif
 
 #ifdef SPDLOG_HEADER_ONLY
-- 
2.17.1

